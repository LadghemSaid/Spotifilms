{% extends 'base.html.twig' %}

{% block title %}Series{% endblock %}

{% block body %}

    <div id="container" class=" intro-effect-sidefixed">
        <!-- Top Navigation -->
        <header class="header">
            <div class="video-wrapper fixed-side hidden">
                <video src="/video/series/truedetective.mp4" class="video" autoplay muted>

                </video>
            </div>
            <div class="bg-img"><img src="{{ series.image }}" alt="Background Image"/></div>
        </header>

        <article class="content">
            <div class="title">
                <h1>{{ series.name }}</h1>
                <div class='rating-stars'>
                    <div class="note"><span style="font-size: 5rem;">{{ series.score }}</span><span
                                style="font-size: 3rem;">/</span><span style="font-size: 3rem;">10</span></div>
                    <ul id='stars'>
                        <li class='star' title='Poor' data-value='1'>
                            <i class='fa fa-star fa-fw'></i>
                        </li>
                        <li class='star' title='Fair' data-value='2'>
                            <i class='fa fa-star fa-fw'></i>
                        </li>
                        <li class='star' title='Good' data-value='3'>
                            <i class='fa fa-star fa-fw'></i>
                        </li>
                        <li class='star' title='Excellent' data-value='4'>
                            <i class='fa fa-star fa-fw'></i>
                        </li>
                        <li class='star' title='WOW!!!' data-value='5'>
                            <i class='fa fa-star fa-fw'></i>
                        </li>
                    </ul>
                </div>
                <p class="subline">{% for genre in series.kinds %} [ {{ genre }} ]  {% endfor %}</p>
                <p style="display: block"> {{ series.language }}</p>
                <p> {% if  series.status == "running" %}En cours de difussion {% else %} Production terminer {% endif %} </p>
                <p>Réalisé par<strong> Henry James</strong> &#8212; sortie le
                    <strong>{{ series.premiere ? series.premiere|date('Y-m-d') : '' }}</strong></p>

                {{ series.summary | raw }}

            </div>
            <div>


                <h1>Episodes </h1>
                <span>Durée :
                    {% set duree = 0 %}
                    {% for episode in episodes %}
                        {% set duree = duree + (episode.duration/60)|round %}
                    {% endfor %}
                   <strong>{{ duree }}</strong> h</span>
                <ul data-tabs id="tabs">

                </ul>
                <div id="seasons" class="seasons_series">


                    <div id="all_episode" style="display: none">
                        {% for episode in series.episodes %}

                                <a href="#"  data-season="{{ episode.season }}" >
                                    <div class="episode_card">
                                        <span class="number"> {{ episode.number }}</span>
                                        <img src="{{ episode.image }}" alt="Stack Overflow logo and icons and such"
                                             onerror="if (this.src != 'https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-1-scaled.png') this.src = 'https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-1-scaled.png';">

                                        <h4>{{ episode.name }} </h4>
                                    </div>
                                </a>


                        {% endfor %}
                    </div>


                </div>

                <section class="avis_user">
                    <h4>Avis de la rédaction</h4>
                    <p>We may define a food to be any substance which will repair the functional waste of the body,
                        increase its
                        growth, or maintain the heat, muscular, and nervous energy. </p>
                    <p>In its most comprehensive sense, the oxygen of the air is a food; as although it is admitted by
                        the
                        lungs, it passes into the blood, and there re-acts upon the other food which has passed through
                        the
                        stomach. It is usual, however, to restrict the term food to such nutriment as enters the body by
                        the
                        intestinal canal. Water is often spoken of as being distinct from food, but for this there is no
                        sufficient reason.</p>

                    <h1>Critiques Spectateurs</h1>
                    {% for comment in comments %}
                        {% if comment.Series.id == series.id %}
                            {% for role in comment.User.roles %}
                                {% if role == "ROLE_ADMIN" %}
                                    <tr>
                                        <th>Avis de la rédaction</th>
                                        <td>{{ comment.content }}</td>
                                    </tr>
                                {% endif %}
                                <div class="critique">
                                    <div class="infos">
                                        <img src="https://randomuser.me/api/portraits/thumb/men/75.jpg" alt=""
                                             class="profile_pic">
                                        <span>John Doe</span>
                                        <span><strong>15</strong> avis</span>
                                    </div>
                                    <div class="text_critique">
                                        <span>publié il y a <strong>2 jours</strong></span>
                                        <p>{{ comment.content }}
                                        </p>
                                    </div>
                                </div>
                            {% endfor %}
                            {% if is_granted('ROLE_ADMIN') %}
                                <td><a href="{{ path('comments_edit', {'id': comment.id}) }}">Edition de l'avis</a></td>
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {% if comments|length == 0 %}
                        <h2>Aucun avis utilisateur</h2>
                    {% endif %}


                </section>


            </div>

        </article>

    </div><!-- /container -->




    <a href="{{ path('series_index') }}">back to list</a>

    {% if is_granted('ROLE_ADMIN') == true %}
        <a href="{{ path('series_edit', {'id': series.id}) }}">edit</a>

        {{ include('series/_delete_form.html.twig') }}
    {% endif %}
    <h2>Potits avis</h2>
    {% if comments != null %}
        <a href="{{ path('comments_new', {"id": series.id}) }}">Rajouter un potit mot de votre plume divine</a>
        <br>
        <a href="{{ path('series_show', {'id': series.id, 'order':'ASC'}) }}">Trier les series par avis positifs</a>
        <a href="{{ path('series_show', {'id': series.id, 'order':'DESC'}) }}">Trier les series par avis negatifs</a>
        <h3>Pourcentage des commentaires validés : {{ average_positive * 100 }}%</h3>
        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Series</th>
                <th>Review</th>
            </tr>
            </thead>
            <tbody>
            {% for comment in comments %}
                <tr>
                    <td>{{ comment.id }}</td>
                    <td>{{ comment.Series }}</td>
                    <td>{{ comment.content }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    {% else %}
        <i>Personne n'a encore gratifié cette série d'un petit mot :( <a
                    href="{{ path('comments_new', {"id": series.id}) }}">Soyez le premier</a></i>
    {% endif %}


{% endblock %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/gh/cferdinandi/tabby@12/dist/js/tabby.polyfills.js"></script>

    <script>
        /*!
 * classie v1.0.1
 * class helper functions
 * from bonzo https://github.com/ded/bonzo
 * MIT license
 *
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

        /*jshint browser: true, strict: true, undef: true, unused: true */
        /*global define: false, module: false */

        (function (window) {

            'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

            function classReg(className) {
                return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
            }

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
            var hasClass, addClass, removeClass;

            if ('classList' in document.documentElement) {
                hasClass = function (elem, c) {
                    return elem.classList.contains(c);
                };
                addClass = function (elem, c) {
                    elem.classList.add(c);
                };
                removeClass = function (elem, c) {
                    elem.classList.remove(c);
                };
            } else {
                hasClass = function (elem, c) {
                    return classReg(c).test(elem.className);
                };
                addClass = function (elem, c) {
                    if (!hasClass(elem, c)) {
                        elem.className = elem.className + ' ' + c;
                    }
                };
                removeClass = function (elem, c) {
                    elem.className = elem.className.replace(classReg(c), ' ');
                };
            }

            function toggleClass(elem, c) {
                var fn = hasClass(elem, c) ? removeClass : addClass;
                fn(elem, c);
            }

            var classie = {
                // full names
                hasClass: hasClass,
                addClass: addClass,
                removeClass: removeClass,
                toggleClass: toggleClass,
                // short names
                has: hasClass,
                add: addClass,
                remove: removeClass,
                toggle: toggleClass
            };

// transport
            if (typeof define === 'function' && define.amd) {
                // AMD
                define(classie);
            } else if (typeof exports === 'object') {
                // CommonJS
                module.exports = classie;
            } else {
                // browser global
                window.classie = classie;
            }

        })(window);
    </script>
    <script>

        //slick carousel des episodes
        $(document).ready(function () {
            let numberOfSeason = $('[data-season]')[$('[data-season]').length - 1].dataset.season;
            //console.log( $('[data-season!="2"]'));
            // console.log($('[data-season]')[$('[data-season]').length - 1].dataset.season);
            for (let i = 1; i <= numberOfSeason; i++) {
                // console.log('in');
                let seasondiv = document.createElement('div');
                //let seasonUl = document.createElement('ul');
                //seasonUl.className
                seasondiv.id = 'saison' + i;
                seasondiv.className = 'slider_episode frame';
                document.getElementById('seasons').appendChild(seasondiv);
               // document.getElementById('saison' + i).appendChild(seasonUl);

                //tabs
                let seasonstabsLi = document.createElement('li');
                let seasonstabsA = document.createElement('a');
                seasonstabsA.href = "#saison" + i;
                seasonstabsA.text = 'Saison ' + i;
                seasonstabsLi.appendChild(seasonstabsA);
                document.getElementById('tabs').appendChild(seasonstabsLi);

                //les episode
                //console.log( );
                let episodes = $("[data-season='" + i + "']");
                for (let j = 0; j <= episodes.length - 1; j++) {
                    //   console.log(episodes[j]);
                    document.getElementById('saison' + i).appendChild(episodes[j]);
                }


            }

            var tabs = new Tabby('[data-tabs]');




        });
    </script>
    <script>
        (function () {

            // detect if IE : from http://stackoverflow.com/a/16657946
            var ie = (function () {
                var undef, rv = -1; // Return value assumes failure.
                var ua = window.navigator.userAgent;
                var msie = ua.indexOf('MSIE ');
                var trident = ua.indexOf('Trident/');

                if (msie > 0) {
                    // IE 10 or older => return version number
                    rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
                } else if (trident > 0) {
                    // IE 11 (or newer) => return version number
                    var rvNum = ua.indexOf('rv:');
                    rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
                }

                return ((rv > -1) ? rv : undef);
            }());


            // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179
            // left: 37, up: 38, right: 39, down: 40,
            // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
            var keys = [32, 37, 38, 39, 40], wheelIter = 0;

            function preventDefault(e) {
                e = e || window.event;
                if (e.preventDefault)
                    e.preventDefault();
                e.returnValue = false;
            }

            function keydown(e) {
                for (var i = keys.length; i--;) {
                    if (e.keyCode === keys[i]) {
                        preventDefault(e);
                        return;
                    }
                }
            }

            function touchmove(e) {
                preventDefault(e);
            }

            function wheel(e) {
                // for IE
                //if( ie ) {
                //preventDefault(e);
                //}
            }

            function disable_scroll() {
                window.onmousewheel = document.onmousewheel = wheel;
                document.onkeydown = keydown;
                document.body.ontouchmove = touchmove;
            }

            function enable_scroll() {
                window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;
            }

            var docElem = window.document.documentElement,
                scrollVal,
                isRevealed,
                noscroll,
                isAnimating,
                container = document.getElementById('container'),
                trigger = container.querySelector('button.trigger');

            function scrollY() {
                return window.pageYOffset || docElem.scrollTop;
            }

            function scrollPage() {
                scrollVal = scrollY();

                if (noscroll && !ie) {
                    if (scrollVal < 0) return false;
                    // keep it that way
                    window.scrollTo(0, 0);
                }

                if (classie.has(container, 'notrans')) {
                    classie.remove(container, 'notrans');
                    return false;
                }

                if (isAnimating) {
                    return false;
                }

                if (scrollVal <= 0 && isRevealed) {
                    toggle(0);
                } else if (scrollVal > 0 && !isRevealed) {
                    toggle(1);
                }
            }

            function toggle(reveal) {
                isAnimating = true;

                if (reveal) {
                    classie.add(container, 'modify');
                } else {
                    noscroll = true;
                    disable_scroll();
                    classie.remove(container, 'modify');
                }

                // simulating the end of the transition:
                setTimeout(function () {
                    isRevealed = !isRevealed;
                    isAnimating = false;
                    if (reveal) {
                        noscroll = false;
                        enable_scroll();
                    }
                }, 600);
            }

            // refreshing the page...
            var pageScroll = scrollY();
            noscroll = pageScroll === 0;

            disable_scroll();

            if (pageScroll) {
                isRevealed = true;
                classie.add(container, 'notrans');
                classie.add(container, 'modify');
            }

            window.addEventListener('scroll', scrollPage);

        })();
    </script>
    <script>
        $(document).ready(function () {
            // Get media - with autoplay disabled (audio or video)
            var media = $('video').not("[autoplay='autoplay']");
            var tolerancePixel = 100;

            function checkMedia() {
                // Get current browser top and bottom
                var scrollTop = $(window).scrollTop() + tolerancePixel;
                var scrollBottom = $(window).scrollTop() + $(window).height() - tolerancePixel;

                media.each(function (index, el) {
                    var yTopMedia = $(this).offset().top;
                    var yBottomMedia = $(this).height() + yTopMedia;

                    if (scrollTop < yBottomMedia && scrollBottom > yTopMedia) { //view explaination in `In brief` section above
                        $(this).get(0).play();
                    } else {
                        $(this).get(0).pause();
                    }
                });

                //}
            }

            $(document).on('scroll', checkMedia);
        });
    </script>
    <script>
        $(document).ready(function () {
            // hide .navbar first

            // fade in .navbar
            $(function () {
                $(window).scroll(function () {
                    // set distance user needs to scroll before we fadeIn navbar
                    if ($(this).scrollTop() > 50) {
                        $('.video-wrapper')[0].classList.remove('hidden');
                    } else {
                        $('.video-wrapper')[0].classList.add('hidden');

                    }


                });


            });

        });

    </script>
{% endblock %}

